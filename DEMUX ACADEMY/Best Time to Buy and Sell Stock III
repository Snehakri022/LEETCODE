You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

Example 1:

Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.
Example 4:

Input: prices = [1]
Output: 0
 
Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 105


class Solution {

public:

    int maxProfit(vector<int>& prices) {

        // Preprocessing.

        // For every prefix, max profit using one txn.

        int n = prices.size(), min_so_far;

        

        if (n == 1) return 0;

        

        vector<int> max_profit_one(n);

        

        max_profit_one[0] = 0;

        min_so_far = prices[0];

        for (int i = 1; i < n; i++) {

            // 2 choices

            // Sell at i

            // Sell at a day < i

            max_profit_one[i] = max(max_profit_one[i-1], prices[i] - min_so_far);

            min_so_far = min(min_so_far, prices[i]);

        }

        

        // Main logic.

        int max_so_far;

        int ans = 0;

        

        // For n-1

        int pi = max_profit_one[n-2];

        ans = max(ans, pi);

        max_so_far = prices[n-1];

        

        // For n-2 to 1

        for (int i = n-2; i >= 1; i--) {

            int pi = max_profit_one[i-1] + max_so_far - prices[i];

            ans = max(ans, pi);

            max_so_far = max(max_so_far, prices[i]);

        }

        

        // For 0.

        pi = max_so_far - prices[0];

        ans = max(ans, pi);

        

        return ans;

    }

};
