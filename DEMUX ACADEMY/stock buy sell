Let's look at a problem involving cumulative statistics on arrays.
You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 104
Problems involving cumulative statistics




class Solution {

public:

    int maxProfit(vector<int>& prices) {

        // pi: Max profit assuming you sell on the ith day.

        int n = prices.size(), pi, min_price = prices[0], ans = 0;


        // Start a loop

        for (int i = 1; i < n; i++) {

            // Compute pi

            pi = prices[i] - min_price;

            

            // Update min_price

            min_price = min(min_price, prices[i]);

            

            // Compute the answer.

            ans = max(ans, pi);

        } 

        return ans;

    }

};

